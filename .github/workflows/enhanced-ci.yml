name: 🚀 Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'shared/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'shared/**'
      - 'package.json'
      - 'pnpm-workspace.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        default: false
        type: boolean

# Permissions
permissions:
  contents: read
  packages: write
  deployments: write
  pull-requests: write
  checks: write
  actions: write
  security-events: write

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'
  REGISTRY_URL: 'ghcr.io'
  IMAGE_NAME: 'mendian-frontend'
  # Build optimization
  HUSKY: '0'
  CI: 'true'
  # Node.js optimization
  NODE_OPTIONS: '--max-old-space-size=4096'
  # Security
  FORCE_COLOR: '1'

jobs:
  # Pre-flight checks
  pre-flight:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'shared/**'
            backend:
              - 'backend/**'
              - 'shared/**'
            config:
              - 'package.json'
              - 'pnpm-workspace.yaml'
              - '.github/**'

      - name: 🚀 Check deployment conditions
        id: deploy-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Enhanced code quality checks
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.frontend-changed == 'true' || needs.pre-flight.outputs.backend-changed == 'true'
    
    strategy:
      matrix:
        package: ['frontend', 'backend']
        include:
          - package: frontend
            condition: needs.pre-flight.outputs.frontend-changed
          - package: backend
            condition: needs.pre-flight.outputs.backend-changed
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            ${{ matrix.package }}/pnpm-lock.yaml

      - name: 📥 Install dependencies with retry
        run: |
          for i in {1..3}; do
            if pnpm install --frozen-lockfile --prefer-offline; then
              echo "✅ Dependencies installed successfully on attempt $i"
              break
            else
              echo "❌ Attempt $i failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "💥 All attempts failed"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: 🔧 TypeScript type check
        if: matrix.condition == 'true'
        run: |
          echo "Running TypeScript checks for ${{ matrix.package }}..."
          pnpm --filter @mendian/${{ matrix.package }} typecheck

      - name: 🎨 ESLint check
        if: matrix.condition == 'true'
        run: |
          echo "Running ESLint for ${{ matrix.package }}..."
          pnpm --filter @mendian/${{ matrix.package }} lint

      - name: 💅 Prettier format check
        if: matrix.condition == 'true'
        run: |
          echo "Checking code formatting for ${{ matrix.package }}..."
          pnpm --filter @mendian/${{ matrix.package }} format:check
        continue-on-error: true

      - name: 🔒 Security audit
        if: matrix.condition == 'true'
        run: |
          echo "Running security audit for ${{ matrix.package }}..."
          pnpm --filter @mendian/${{ matrix.package }} audit --audit-level moderate || true

      - name: 📊 Code complexity analysis
        if: matrix.condition == 'true' && matrix.package == 'frontend'
        run: |
          echo "Analyzing code complexity..."
          # Add complexity analysis tools here
          npx complexity-report --format json --output complexity-report.json src/ || true
        continue-on-error: true

  # Comprehensive testing
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: [pre-flight, quality]
    if: needs.pre-flight.outputs.frontend-changed == 'true' && (inputs.skip_tests != true)
    
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration', 'component']
        node-version: ['18']
        include:
          - test-type: unit
            command: 'test:unit'
            coverage: true
          - test-type: integration  
            command: 'test:integration'
            coverage: true
          - test-type: component
            command: 'test:components'
            coverage: false

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          echo "Running ${{ matrix.test-type }} tests..."
          pnpm --filter @mendian/frontend ${{ matrix.command }}
        env:
          NODE_ENV: test
          CI: true

      - name: 📊 Upload coverage reports
        if: matrix.coverage == true
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ matrix.node-version }}
          path: |
            frontend/coverage/
            frontend/test-results/
          retention-days: 30

  # Multi-stage build with optimization
  build:
    name: 🏗️ Build & Optimize
    runs-on: ubuntu-latest
    needs: [pre-flight, quality, test]
    if: always() && (needs.quality.result == 'success' && (needs.test.result == 'success' || inputs.skip_tests == true))
    
    strategy:
      matrix:
        environment: ['staging', 'production']
        exclude:
          - environment: production
            if: github.ref != 'refs/heads/main' && github.event.inputs.environment != 'production'
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: 🏗️ Build application for ${{ matrix.environment }}
        run: |
          echo "Building for ${{ matrix.environment }} environment..."
          pnpm build
        env:
          NODE_ENV: ${{ matrix.environment == 'production' && 'production' || 'staging' }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          VITE_APP_ENVIRONMENT: ${{ matrix.environment }}
          VITE_APP_COMMIT_SHA: ${{ github.sha }}
          VITE_APP_BRANCH: ${{ github.ref_name }}

      - name: 📦 Optimize build artifacts
        run: |
          echo "Optimizing build artifacts..."
          # Remove source maps in production
          if [ "${{ matrix.environment }}" == "production" ]; then
            find frontend/dist -name "*.map" -type f -delete
            echo "Removed source maps for production"
          fi
          
          # Compress assets
          cd frontend/dist
          find . -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -9 -k {} \;
          echo "Created gzip compressed assets"

      - name: 📊 Build analysis
        run: |
          echo "Analyzing build size..."
          du -sh frontend/dist/
          ls -la frontend/dist/assets/ | head -10
          
          # Generate build report
          echo "## Build Report for ${{ matrix.environment }}" >> build-report.md
          echo "- **Environment**: ${{ matrix.environment }}" >> build-report.md
          echo "- **Build Size**: $(du -sh frontend/dist/ | cut -f1)" >> build-report.md
          echo "- **Assets Count**: $(find frontend/dist/assets -type f | wc -l)" >> build-report.md
          echo "- **Commit**: ${{ github.sha }}" >> build-report.md

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}-${{ github.run_number }}
          path: |
            frontend/dist/
            build-report.md
          retention-days: ${{ matrix.environment == 'production' && 90 || 30 }}
          compression-level: 9

  # Advanced security scanning
  security:
    name: 🔒 Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: pre-flight
    permissions:
      security-events: write
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Dependency vulnerability scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: high
          allow-ghsas: GHSA-jchw-25xp-jwwc,GHSA-cxjh-pqwp-8mfp

      - name: 🔒 Run npm audit
        run: |
          echo "Running npm security audit..."
          pnpm audit --audit-level moderate || {
            echo "Security vulnerabilities found. Review the output above."
            echo "Consider running: pnpm audit --fix"
          }
        continue-on-error: true

      - name: 🔍 License compliance check
        run: |
          echo "Checking license compliance..."
          npx license-checker --summary || true
        continue-on-error: true

      - name: 📋 Security report
        run: |
          echo "## 🔒 Security Scan Summary" >> security-report.md
          echo "- **Scan Date**: $(date)" >> security-report.md
          echo "- **Commit**: ${{ github.sha }}" >> security-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Dependencies Scanned" >> security-report.md
          pnpm list --depth=0 --json | jq -r '.dependencies | keys[]' | head -20 >> security-report.md || echo "No dependencies found"

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.md
          retention-days: 90

  # Staging deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-flight, build, security]
    if: |
      needs.pre-flight.outputs.should-deploy == 'true' && 
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.mendian.example.com
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging-${{ github.run_number }}
          path: ./dist

      - name: 🛠️ Setup deployment tools
        run: |
          # Install deployment dependencies
          sudo apt-get update
          sudo apt-get install -y rsync
          
          # Setup AWS CLI if using AWS
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            pip install awscli
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION || 'us-east-1' }}
          fi

      - name: 🌐 Deploy to staging (Placeholder)
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📁 Build files ready in ./dist"
          echo "🔧 Add your deployment logic here:"
          echo "   - AWS S3/CloudFront"
          echo "   - Netlify"  
          echo "   - Vercel"
          echo "   - Docker/Kubernetes"
          echo "   - FTP/SSH"
          
          # Example deployments (uncomment and configure as needed):
          
          # AWS S3 + CloudFront
          # aws s3 sync ./dist s3://your-staging-bucket/ --delete
          # aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"
          
          # Netlify
          # npx netlify-cli deploy --prod --dir=dist --site=your-site-id --auth=your-auth-token
          
          # Vercel  
          # npx vercel --prod --token=your-vercel-token
          
          # Docker
          # docker build -t staging-image ./
          # docker push registry/staging-image

      - name: 🧪 Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging environment..."
          
          # Add your staging URL health checks here
          # curl -f -s https://staging.mendian.example.com/health
          
          echo "✅ Staging deployment completed"
        continue-on-error: false

      - name: 📝 Staging deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://staging.mendian.example.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY

  # Production deployment with approval
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-flight, build, security, deploy-staging]
    if: |
      needs.pre-flight.outputs.should-deploy == 'true' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://mendian.example.com
    
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production-${{ github.run_number }}
          path: ./dist

      - name: 🛠️ Setup deployment tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            pip install awscli
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION || 'us-east-1' }}
          fi

      - name: 📊 Pre-deployment checks
        run: |
          echo "Running pre-deployment checks..."
          
          # Verify build integrity
          if [ ! -d "./dist" ] || [ -z "$(ls -A ./dist)" ]; then
            echo "❌ Build artifacts missing or empty"
            exit 1
          fi
          
          echo "✅ Build artifacts verified"
          echo "Files to deploy: $(find ./dist -type f | wc -l)"
          echo "Total size: $(du -sh ./dist | cut -f1)"

      - name: 🌐 Deploy to production (Placeholder)
        run: |
          echo "🏭 Deploying to production environment..."
          echo "📁 Build files ready in ./dist"
          echo "🔧 Add your production deployment logic here:"
          echo ""
          echo "Examples:"
          echo "   - AWS S3 + CloudFront with backup"
          echo "   - Blue-green Kubernetes deployment"
          echo "   - CDN deployment with rollback capability"
          echo "   - Multi-region deployment"
          
          # Example production deployment patterns:
          
          # AWS with backup and rollback
          # aws s3 sync s3://prod-bucket/ s3://backup-bucket/backup-$(date +%Y%m%d-%H%M%S)/ || true
          # aws s3 sync ./dist s3://prod-bucket/ --delete
          # aws cloudfront create-invalidation --distribution-id PROD_DISTRIBUTION_ID --paths "/*"
          
          # Kubernetes blue-green deployment
          # kubectl apply -f k8s/production/
          # kubectl rollout status deployment/mendian-frontend -n production --timeout=600s

      - name: 🔍 Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          
          # Add your production health checks here
          # Wait for deployment to stabilize
          sleep 10
          
          echo "✅ Production deployment verified successfully"
        continue-on-error: false

      - name: 📝 Production deployment summary
        if: always()
        run: |
          STATUS="${{ job.status == 'success' && '✅ Deployed Successfully' || '❌ Deployment Failed' }}"
          
          echo "## 🏭 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://mendian.example.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $STATUS" >> $GITHUB_STEP_SUMMARY

  # Cleanup and notification
  cleanup:
    name: 🧹 Cleanup & Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🧹 Clean up temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            test-results-*
          failOnError: false

      - name: 📝 Workflow Summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Enhanced CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality**: ${{ needs.quality.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: ${{ needs.deploy-staging.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: ${{ needs.deploy-production.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY